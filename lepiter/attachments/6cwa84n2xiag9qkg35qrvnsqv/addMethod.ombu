OmEntry {	#tags : {		#prior : OmReference [ '0' ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackMachine,				#isMetaSide : false			},			#name : #add1and2,			#protocol : #accessing,			#sourceCode : 'add1and2\n\t<gtExample>\n\t| result |\n\tresult := self pushed1and2.\n\tresult add.\n\tself assert: result value size equals: 1.\n\tself assert: result top equals: 3.\n\t^ result',			#stamp : 'GlamorousAuthor 4/14/2022 11:08',			#package : #StackMachine		}	}}OmEntry {	#tags : {		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackMachine,				#isMetaSide : false			},			#name : #add,			#protocol : #accessing,			#sourceCode : 'add\n\tself assert: value size >= 2 description: \'operation needs two arguments on the stack\'.\n\tself push: self pop + self pop',			#stamp : 'GlamorousAuthor 4/14/2022 11:07',			#package : #StackMachine		}	}}